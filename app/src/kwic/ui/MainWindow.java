/*
 * uiView.java
 */

package kwic.ui;

import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.Task;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import javax.swing.AbstractListModel;
import javax.swing.DefaultListModel;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.ListModel;
import kwic.index.CircularShifter;
import kwic.index.IndexList;
import kwic.index.InputReader;
import kwic.index.IndexedString;

/**
 * The application's main frame.
 */
public class MainWindow extends FrameView {

    public MainWindow(SingleFrameApplication app) {
        super(app);

        initComponents();
        this._inputRecordList.setModel(this._inputModel);
        this._indexRecordList.setModel(this._indexModel);

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                _statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                _statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        _statusAnimationLabel.setIcon(idleIcon);
        _progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        _statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    _progressBar.setVisible(true);
                    _progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    _statusAnimationLabel.setIcon(idleIcon);
                    _progressBar.setVisible(false);
                    _progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String)(evt.getNewValue());
                    _statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer)(evt.getNewValue());
                    _progressBar.setVisible(true);
                    _progressBar.setIndeterminate(false);
                    _progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = Main.getApplication().getMainFrame();
            aboutBox = new AboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        Main.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        _mainPanel = new javax.swing.JPanel();
        _kwicSplitPane = new javax.swing.JSplitPane();
        _inputScrollPane = new javax.swing.JScrollPane();
        _inputRecordList = new javax.swing.JList();
        _indexScrollPane = new javax.swing.JScrollPane();
        _indexRecordList = new javax.swing.JList();
        _menu = new javax.swing.JMenuBar();
        javax.swing.JMenu _fileMenu = new javax.swing.JMenu();
        _loadMenuItem = new javax.swing.JMenuItem();
        _saveMenuItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        javax.swing.JMenuItem _exitMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu _helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem _aboutMenuItem = new javax.swing.JMenuItem();
        _statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        _statusMessageLabel = new javax.swing.JLabel();
        _statusAnimationLabel = new javax.swing.JLabel();
        _progressBar = new javax.swing.JProgressBar();
        _inputPopupMenu = new javax.swing.JPopupMenu();
        _inputRemovePopup = new javax.swing.JMenuItem();
        _indexPopupMenu = new javax.swing.JPopupMenu();
        _indexRemovePopup = new javax.swing.JMenuItem();

        _mainPanel.setMinimumSize(new java.awt.Dimension(100, 110));
        _mainPanel.setName("_mainPanel"); // NOI18N
        _mainPanel.setPreferredSize(new java.awt.Dimension(939, 500));

        _kwicSplitPane.setDividerLocation(225);
        _kwicSplitPane.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        _kwicSplitPane.setName("_kwicSplitPane"); // NOI18N

        _inputScrollPane.setName("_inputScrollPane"); // NOI18N

        _inputRecordList.setComponentPopupMenu(_indexPopupMenu);
        _inputRecordList.setName("_inputRecordList"); // NOI18N
        _inputScrollPane.setViewportView(_inputRecordList);

        _kwicSplitPane.setLeftComponent(_inputScrollPane);

        _indexScrollPane.setComponentPopupMenu(_inputPopupMenu);
        _indexScrollPane.setName("_indexScrollPane"); // NOI18N

        _indexRecordList.setComponentPopupMenu(_inputPopupMenu);
        _indexRecordList.setName("_indexRecordList"); // NOI18N
        _indexScrollPane.setViewportView(_indexRecordList);

        _kwicSplitPane.setRightComponent(_indexScrollPane);

        javax.swing.GroupLayout _mainPanelLayout = new javax.swing.GroupLayout(_mainPanel);
        _mainPanel.setLayout(_mainPanelLayout);
        _mainPanelLayout.setHorizontalGroup(
            _mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, _mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(_kwicSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 915, Short.MAX_VALUE)
                .addContainerGap())
        );
        _mainPanelLayout.setVerticalGroup(
            _mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(_mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(_kwicSplitPane, javax.swing.GroupLayout.DEFAULT_SIZE, 487, Short.MAX_VALUE)
                .addContainerGap())
        );

        _menu.setName("_menu"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(kwic.ui.Main.class).getContext().getResourceMap(MainWindow.class);
        _fileMenu.setText(resourceMap.getString("_fileMenu.text")); // NOI18N
        _fileMenu.setName("_fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(kwic.ui.Main.class).getContext().getActionMap(MainWindow.class, this);
        _loadMenuItem.setAction(actionMap.get("loadFile")); // NOI18N
        _loadMenuItem.setText(resourceMap.getString("_loadMenuItem.text")); // NOI18N
        _loadMenuItem.setToolTipText(resourceMap.getString("_loadMenuItem.toolTipText")); // NOI18N
        _loadMenuItem.setName("_loadMenuItem"); // NOI18N
        _fileMenu.add(_loadMenuItem);

        _saveMenuItem.setAction(actionMap.get("saveIndex")); // NOI18N
        _saveMenuItem.setText(resourceMap.getString("_saveMenuItem.text")); // NOI18N
        _saveMenuItem.setToolTipText(resourceMap.getString("_saveMenuItem.toolTipText")); // NOI18N
        _saveMenuItem.setName("_saveMenuItem"); // NOI18N
        _fileMenu.add(_saveMenuItem);

        jSeparator1.setName("jSeparator1"); // NOI18N
        _fileMenu.add(jSeparator1);

        _exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        _exitMenuItem.setName("_exitMenuItem"); // NOI18N
        _fileMenu.add(_exitMenuItem);

        _menu.add(_fileMenu);

        _helpMenu.setText(resourceMap.getString("_helpMenu.text")); // NOI18N
        _helpMenu.setName("_helpMenu"); // NOI18N

        _aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        _aboutMenuItem.setName("_aboutMenuItem"); // NOI18N
        _helpMenu.add(_aboutMenuItem);

        _menu.add(_helpMenu);

        _statusPanel.setName("_statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        _statusMessageLabel.setName("_statusMessageLabel"); // NOI18N

        _statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        _statusAnimationLabel.setName("_statusAnimationLabel"); // NOI18N

        _progressBar.setName("_progressBar"); // NOI18N

        javax.swing.GroupLayout _statusPanelLayout = new javax.swing.GroupLayout(_statusPanel);
        _statusPanel.setLayout(_statusPanelLayout);
        _statusPanelLayout.setHorizontalGroup(
            _statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 939, Short.MAX_VALUE)
            .addGroup(_statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(_statusMessageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 755, Short.MAX_VALUE)
                .addComponent(_progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(_statusAnimationLabel)
                .addContainerGap())
        );
        _statusPanelLayout.setVerticalGroup(
            _statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(_statusPanelLayout.createSequentialGroup()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(_statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(_statusMessageLabel)
                    .addComponent(_statusAnimationLabel)
                    .addComponent(_progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3))
        );

        _inputPopupMenu.setName("_inputPopupMenu"); // NOI18N

        _inputRemovePopup.setText(resourceMap.getString("_inputRemovePopup.text")); // NOI18N
        _inputRemovePopup.setToolTipText(resourceMap.getString("_inputRemovePopup.toolTipText")); // NOI18N
        _inputRemovePopup.setName("_inputRemovePopup"); // NOI18N
        _inputPopupMenu.add(_inputRemovePopup);

        _indexPopupMenu.setName("_indexPopupMenu"); // NOI18N

        _indexRemovePopup.setText(resourceMap.getString("_indexRemovePopup.text")); // NOI18N
        _indexRemovePopup.setToolTipText(resourceMap.getString("_indexRemovePopup.toolTipText")); // NOI18N
        _indexRemovePopup.setName("_indexRemovePopup"); // NOI18N
        _indexPopupMenu.add(_indexRemovePopup);

        setComponent(_mainPanel);
        setMenuBar(_menu);
        setStatusBar(_statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    @Action
    public Task saveIndex() {
        return new SaveIndexTask(getApplication());
    }

    private class SaveIndexTask extends org.jdesktop.application.Task<Object, Void> {
        SaveIndexTask(org.jdesktop.application.Application app) {
            super(app);
            System.err.println("Saving indexed data...");
        }
        @Override protected Object doInBackground() {
            System.err.println("Saving indexed data to a file...");
            kwic.index.IndexedString si = new kwic.index.IndexedString("Hello World!");
            System.err.println(si.toString() + " => " + si.getIndex());
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
            System.err.println("Save completed successfully.");
        }
    }

    @Action
    public Task loadFile() {
        return new LoadFileTask(getApplication());
    }

    private class LoadFileTask extends org.jdesktop.application.Task<Object, Void> {
        LoadFileTask(org.jdesktop.application.Application app) {
            super(app);

            //bring up the file dialog to select a file
            JFileChooser fc = new JFileChooser();
            int returnVal = fc.showOpenDialog(_mainPanel);

            if (returnVal == JFileChooser.APPROVE_OPTION) {
                _file = fc.getSelectedFile();
            } else {
                _file = null;
            }
        }
        @Override protected Object doInBackground() {
            InputReader ir = null;
            IndexList il = null;
            try {
                //read in one shiftedinput after the other
                il = new IndexList(new CircularShifter());
                IndexedString si = null;
                ir = new InputReader(_file.toString());
                while((si = ir.next()) != null) {
                    il.add(si);
                    ((DefaultListModel)MainWindow.this._inputRecordList.getModel()).addElement(si);
                }

                for(IndexedString sin : il) {
                    ((DefaultListModel)MainWindow.this._indexRecordList.getModel()).addElement(sin.getIndex() + " | " + sin.toString());
                }
                return il;
            } catch (FileNotFoundException ex) {
                Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    ir.close();
                } catch (IOException ex) {
                    Logger.getLogger(MainWindow.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            return il;
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }

        private File _file;
    }

    @Action
    public Task removeDataAndIndex() {
        return new RemoveDataAndIndexTask(getApplication());
    }

    private class RemoveDataAndIndexTask extends org.jdesktop.application.Task<Object, Void> {
        RemoveDataAndIndexTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to RemoveDataAndIndexTask fields, here.
            super(app);
        }
        @Override protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }
    }

    @Action
    public Task removeIndex() {
        return new RemoveIndexTask(getApplication());
    }

    private class RemoveIndexTask extends org.jdesktop.application.Task<Object, Void> {
        RemoveIndexTask(org.jdesktop.application.Application app) {
            // Runs on the EDT.  Copy GUI state that
            // doInBackground() depends on from parameters
            // to RemoveIndexTask fields, here.
            super(app);
        }
        @Override protected Object doInBackground() {
            // Your Task's code here.  This method runs
            // on a background thread, so don't reference
            // the Swing GUI from here.
            return null;  // return your result
        }
        @Override protected void succeeded(Object result) {
            // Runs on the EDT.  Update the GUI based on
            // the result computed by doInBackground().
        }
    }





    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPopupMenu _indexPopupMenu;
    private javax.swing.JList _indexRecordList;
    private javax.swing.JMenuItem _indexRemovePopup;
    private javax.swing.JScrollPane _indexScrollPane;
    private javax.swing.JPopupMenu _inputPopupMenu;
    private javax.swing.JList _inputRecordList;
    private javax.swing.JMenuItem _inputRemovePopup;
    private javax.swing.JScrollPane _inputScrollPane;
    private javax.swing.JSplitPane _kwicSplitPane;
    private javax.swing.JMenuItem _loadMenuItem;
    private javax.swing.JPanel _mainPanel;
    private javax.swing.JMenuBar _menu;
    private javax.swing.JProgressBar _progressBar;
    private javax.swing.JMenuItem _saveMenuItem;
    private javax.swing.JLabel _statusAnimationLabel;
    private javax.swing.JLabel _statusMessageLabel;
    private javax.swing.JPanel _statusPanel;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    // End of variables declaration//GEN-END:variables

    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;

    private ListModel _inputModel = new DefaultListModel();
    private ListModel _indexModel = new DefaultListModel();
}
